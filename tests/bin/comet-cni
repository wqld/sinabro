#!/bin/bash

exec 3>&1 # make stdout available as fd 3 for the result
exec &>> /var/log/comet-cni.log

IP_STORE=/tmp/reserved_ips # all reserved ips will be stored there

echo "CNI command: $CNI_COMMAND"

stdin=$(cat /dev/stdin)
echo "stdin: $stdin"

# allocate an IP address for the container
function allocate_ip(){
	for ip in "${all_ips[@]}"
	do
		reserved=false
		for reserved_ip in "${reserved_ips[@]}"
		do
			if [ "$ip" = "$reserved_ip" ]; then
				reserved=true
				break
			fi
		done
		if [ "$reserved" = false ] ; then
			echo "$ip" >> $IP_STORE
			echo "$ip"
			return
		fi
	done
}

case $CNI_COMMAND in
ADD)
	network=$(echo "$stdin" | jq -r ".network")
	subnet=$(echo "$stdin" | jq -r ".subnet")
	subnet_mask_size=$(echo $subnet | awk -F  "/" '{print $2}')

	all_ips=$(nmap -sL $subnet | grep "Nmap scan report" | awk '{print $NF}')
	all_ips=(${all_ips[@]})
	skip_ip=${all_ips[0]}
	gw_ip=${all_ips[1]}
	reserved_ips=$(cat $IP_STORE 2> /dev/null || printf "$skip_ip\n$gw_ip\n") # reserving 10.244.0.0 and 10.244.0.1
	reserved_ips=(${reserved_ips[@]})
	printf '%s\n' "${reserved_ips[@]}" > $IP_STORE
	container_ip=$(allocate_ip)

	# CNI spec tells the caller (in our case, kubelet) to create a network ns
	# and pass it in the `CNI_NETNS` env variable.
	mkdir -p /var/run/netns/
	ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID

	rand=$(tr -dc 'A-F0-9' < /dev/urandom | head -c4)
	host_if_name="veth$rand"

	# create a pair of network interfaces
	ip link add peer0 type veth peer name $host_if_name

	# $host_if_name interface remains in the host network namespace
	# and should be added to the cni0 network bridge interface.
	ip link set $host_if_name up
	ip link set $host_if_name master cni0

	# move the peer0 interface to the container network namespace
	ip link set peer0 netns $CNI_CONTAINERID
	# rename the interface to eth0 and set the interface to up
  ip netns exec $CNI_CONTAINERID ip link set peer0 name $CNI_IFNAME
	ip netns exec $CNI_CONTAINERID ip link set $CNI_IFNAME up
	# assign the previously allocated container IP to the interface
	ip netns exec $CNI_CONTAINERID ip addr add $container_ip/$subnet_mask_size dev $CNI_IFNAME
	# create a default route that redirects all traffic to the default gateway,
	# which is the IP address of the cni0 bridge
	ip netns exec $CNI_CONTAINERID ip route add default via $gw_ip dev $CNI_IFNAME

	mac=$(ip netns exec $CNI_CONTAINERID ip link show eth0 | awk '/ether/ {print $2}')

  echo "{
    \"cniVersion\": \"0.3.0\",
    \"interfaces\": [
        {
            \"name\": \"eth0\",
            \"mac\": \"$mac\",
            \"sandbox\": \"$CNI_NETNS\"
        }
    ],
    \"ips\": [
        {
            \"version\": \"4\",
            \"address\": \"$container_ip/$subnet_mask_size\",
            \"gateway\": \"$gw_ip\",
            \"interface\": 0
        }
    ]
  }" >&3
;;

DEL)
	ip=$(ip netns exec $CNI_CONTAINERID ip addr show eth0 | awk '/inet / {print $2}' | sed  s%/.*%% || echo "")
	if [ ! -z "$ip" ]
	then
		sed -i "/$ip/d" $IP_STORE
	fi
;;

GET)
	echo "GET not supported"
	exit 1
;;

VERSION)
echo '{
  "cniVersion": "0.3.0",
  "supportedVersions": [ "0.3.0", "0.4.0" ]
}' >&3
;;

*)
  echo "Unknown CNI command: $CNI_COMMAND"
  exit 1
;;

esac
